<?xml version="1.0" encoding="utf-8"?>
<xsd:schema xmlns="http://www.alibaba.com/water3"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://www.alibaba.com/water3"
            elementFormDefault="qualified">

    <xsd:element name="BusinessScenario">
        <xsd:annotation>
            <xsd:documentation>扩展场景配置, 如:订单渲染、订单创建、订单详情、消息头等</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence>
                <xsd:element ref="ExtensionAbility" minOccurs="1" maxOccurs="unbounded"/>
            </xsd:sequence>
            <xsd:attributeGroup ref="businessScenarioAttrs"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:attributeGroup name="businessScenarioAttrs">
        <xsd:attribute name="scenario" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>场景定义, 如:ORDER_RENDER、ORDER_CREATE、ORDER_DETAIL、MESSAGE_HEAD</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="desc" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>场景描述, 如:订单渲染、订单创建、订单详情、消息头(差的描述不如不描述)</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>


    <xsd:element name="ExtensionAbility">
        <xsd:annotation>
            <xsd:documentation>扩展能力配置, 具体就是一个Java接口</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence minOccurs="1" maxOccurs="50">
                <xsd:element ref="ExtensionPoint"/>
            </xsd:sequence>
            <xsd:attributeGroup ref="extensionAbilityAttrs"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:attributeGroup name="extensionAbilityAttrs">
        <xsd:attribute name="class" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>扩展能力定义, 简单点就是一个开放的接口或者SPI, 如: com.alibaba.idle.create.ext.InitParamsExt</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="base" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>扩展能力基础实现, 当根据业务身份找不到对应实现时, 会自动路由到基础实现:
                    必选、默认只支持SpringBean、不支持懒加载、内容为SpringBeanName
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="desc" type="xsd:string" use="optional">
            <xsd:annotation>
                <xsd:documentation>扩展能力描述, 也就是接口描述, 相当于类级别的注释, 如:订单创建过程中初始化参数相关的扩展能力(差的描述不如不描述)
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:element name="ExtensionPoint">
        <xsd:annotation>
            <xsd:documentation>扩展点配置, 具体就是一个Java方法</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:sequence minOccurs="0" maxOccurs="unbounded">
                <xsd:choice>
                    <xsd:element ref="Business"/>
                </xsd:choice>
            </xsd:sequence>
            <xsd:attributeGroup ref="extensionPointAttrs"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:attributeGroup name="extensionPointAttrs">
        <xsd:attribute name="method" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>扩展点定义, 简单点Java接口的一个method, 如: isSupportCheck、getOrderAttributes</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="args" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>方法入参类型, 以','分割(目前还没什么用)</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="result" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>方法返回值类型(目前也没什么用)</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="desc" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>扩展点描述, 也就是方法描述, 相当于方法级别的注释(差的注释不如不注释)</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:element name="Business">
        <xsd:annotation>
            <xsd:documentation>业务实现配置, 一个标签代表1/n个业务实现</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:choice>
                <xsd:element ref="bean"/>
                <xsd:element ref="hsf"/>
            </xsd:choice>
            <xsd:attributeGroup ref="businessAttrs"/>
        </xsd:complexType>
    </xsd:element>

    <xsd:attributeGroup name="businessAttrs">
        <xsd:attribute name="domain" type="xsd:string" use="optional" default="BASE">
            <xsd:annotation>
                <xsd:documentation>业务域定义, for框架路由扩展使用, 默认的业务身份都共享BASE域下</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="code" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>业务身份定义, 目前支持','分割支持多重业务身份, 对于非BASE域的id定义, 使用模式匹配方式进行顺序匹配, 语法参考:
                    https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/util/AntPathMatcher.html
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="impl" type="Impl" use="required">
            <xsd:annotation>
                <xsd:documentation>业务身份的具体实现类型描述, 目前仅支持bean、hsf两种: 推荐使用hsf, bean仅适用于需要极致性能或者本地事务的场景
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="priority" type="xsd:long" default="0">
            <xsd:annotation>
                <xsd:documentation>相同业务身份的不同实现的排序规则(调用顺序): 越小越靠前</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="desc" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>业务身份描述, 如: 验货宝、闲鱼租赁、图文鉴定、回收帮卖</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>

    <xsd:simpleType name="Impl">
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="bean"/>
            <xsd:enumeration value="hsf"/>
            <xsd:enumeration value="dubbo(*未实现*)"/>
            <xsd:enumeration value="http(*未实现*)"/>
            <xsd:enumeration value="script:spring(*未实现*)"/>
            <xsd:enumeration value="script:java(*未实现*)"/>
            <xsd:enumeration value="script:groovy(*未实现*)"/>
            <xsd:enumeration value="script:python(*未实现*)"/>
            <xsd:enumeration value="script:javascript(*未实现*)"/>
            <xsd:enumeration value="script:lua(*未实现*)"/>
            <xsd:enumeration value="script:sql(*未实现*)"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:element name="bean">
        <xsd:annotation>
            <xsd:documentation>SpringBean实现的描述</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="name" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation>SpringBeanName</xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="lazy" type="xsd:boolean" default="false">
                <xsd:annotation>
                    <xsd:documentation>是否启用懒加载(会被全局参数屏蔽)</xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="hsf">
        <xsd:annotation>
            <xsd:documentation>HSF实现的描述</xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="service" type="xsd:string" use="required"/>
            <xsd:attribute name="version" type="xsd:string" use="required">
                <xsd:annotation>
                    <xsd:documentation>HSF服务版本定义: 必填: 由于同一个SPI不同业务会有不同的实现, 但此时暴露的serviceName都是一样, 因此我们强制使用版本来进行区分.
                        我们会在框架层面进行强制校验:此处所定义的服务版本<p color="red">一定</p>是以上面所定义的业务身份中的<b>一个</b>作为后缀(如:
                        '1.0.0.yhb'、'1.0.0.grey.recycle'), 否则会在解析阶段报错
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="group" type="xsd:string" default="HSF"/>
            <xsd:attribute name="timeout" type="xsd:long">
                <xsd:annotation>
                    <xsd:documentation>clientTimeOut时间</xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="lazy" type="xsd:boolean" default="false">
                <xsd:annotation>
                    <xsd:documentation>是否启用懒加载(会被全局参数屏蔽)</xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>
</xsd:schema>